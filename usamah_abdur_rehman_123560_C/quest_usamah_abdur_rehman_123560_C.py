#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 14, 2017 02:22:53 PM
import sys
import tkMessageBox
import sqlite3
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

# import quest_support



class question:
    count = 1
    counti = 0
    countj = 0

    dbNAme = "database"  # Name of database

    answer = 1

     #Main winow function, Ask Teacher to add quiz title and description etc
    def title(self):

        self.top=Tk()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans} -size 10 -weight bold -slant "  \
            "italic -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 15 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        self.top.geometry("600x450+637+154")
        self.top.title("Quiz")
        self.top.configure(background="#006b31")
        self.top.configure(highlightcolor="black")



        self.Label1 = Label(self.top)
        self.Label1.place(relx=0.05, rely=0.13, height=38, width=136)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#006b31")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''Quiz Ttile''')

        self.Label2 = Label(self.top)
        self.Label2.place(relx=0.03, rely=0.29, height=38, width=176)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#006b31")
        self.Label2.configure(font=font9)
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(text='''Description''')

        self.Label3 = Label(self.top)
        self.Label3.place(relx=0.02, rely=0.44, height=38, width=136)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#006b31")
        self.Label3.configure(font=font9)
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(text='''Quiz ID''')

        self.Label4 = Label(self.top)
        self.Label4.place(relx=0.02, rely=0.62, height=38, width=196)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(background="#006b31")
        self.Label4.configure(font=font9)
        self.Label4.configure(foreground="#ffffff")
        self.Label4.configure(text='''Questions #''')

        self.quizName = Entry(self.top)
        self.quizName.place(relx=0.37, rely=0.13, relheight=0.09, relwidth=0.41)
        self.quizName.configure(background="white")
        self.quizName.configure(font="TkFixedFont")
        self.quizName.configure(selectbackground="#c4c4c4")

        self.questAmount = Entry(self.top)
        self.questAmount.place(relx=0.37, rely=0.6, relheight=0.09
                , relwidth=0.41)
        self.questAmount.configure(background="white")
        self.questAmount.configure(font="TkFixedFont")
        self.questAmount.configure(selectbackground="#c4c4c4")

        self.quizID = Entry(self.top)
        self.quizID.place(relx=0.37, rely=0.42, relheight=0.09, relwidth=0.41)
        self.quizID.configure(background="white")
        self.quizID.configure(font="TkFixedFont")
        self.quizID.configure(selectbackground="#c4c4c4")

        self.quizDescription = Entry(self.top)
        self.quizDescription.place(relx=0.37, rely=0.27, relheight=0.09
                , relwidth=0.41)
        self.quizDescription.configure(background="white")
        self.quizDescription.configure(font="TkFixedFont")
        self.quizDescription.configure(selectbackground="#c4c4c4")

        self.btn = Button(self.top,command=self.add)
        self.btn.place(relx=0.72, rely=0.8, height=46, width=117)
        self.btn.configure(activebackground="#d9d9d9")
        self.btn.configure(background="#0b0911")
        self.btn.configure(borderwidth="3")
        self.btn.configure(font=font10)
        self.btn.configure(foreground="#ffffff")
        self.btn.configure(text='''Next''')

        self.top.mainloop()

    #Close the window function
    def close(self):
        msg=tkMessageBox.askyesno("Quit","Are you Sure you Want to Quit")
        if (msg):
            quit()

    #Adding question function , ask teacher to add quest and its type
    def add(self):
        self.storeRoot = Toplevel(self.top)  #saving the root before withdrawing it this is done beecause
        self.top.withdraw()


        # Adding Question

        self.top = self.storeRoot # getting the stored root

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        font11 = "-family {DejaVu Sans} -size 14 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font16 = "-family {DejaVu Sans} -size 11 -weight bold -slant "  \
            "italic -underline 0 -overstrike 0"

        self.top.geometry("600x450+603+167")
        self.top.title("Question")
        self.top.configure(background="#006b31")

        self.is_checked1 = IntVar()
        self.is_checked2 = IntVar()
        self.is_checked3 = IntVar()

        self.Label1 = Label(self.top)
        self.Label1.place(relx=0.02, rely=0.18, height=48, width=206)
        self.Label1.configure(background="#006b31")
        self.Label1.configure(font=font11)
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''Enter Question''')
        self.Label1.configure(width=206)

        self.entry1 = Entry(self.top)
        self.entry1.place(relx=0.37, rely=0.2, relheight=0.07, relwidth=0.59)
        self.entry1.configure(background="white")
        self.entry1.configure(font="TkFixedFont")
        self.entry1.configure(width=356)



        self.Label2 = Label(self.top)
        self.Label2.place(relx=0.02, rely=0.53, height=48, width=246)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#006b31")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(text='''Type Of Question''')
        self.Label2.configure(width=246)

        self.type1 = Checkbutton(self.top, text="MCQ", onvalue=1, offvalue=0,variable=self.is_checked1)
        self.type2 = Checkbutton(self.top, text="TRUE", onvalue=1, offvalue=0, variable=self.is_checked2)
        self.type3 = Checkbutton(self.top, text="Numeric", onvalue=1, offvalue=0, variable=self.is_checked3)


        self.type1.place(relx=0.45, rely=0.58, relheight=0.07, relwidth=0.1)
        self.type2.place(relx=0.58, rely=0.58, relheight=0.07, relwidth=0.1)
        self.type3.place(relx=0.73, rely=0.58, relheight=0.07 , relwidth=0.14)

        self.nxtBtn = Button(self.top,command=self.addQues)
        self.nxtBtn.place(relx=0.53, rely=0.8, height=36, width=87)
        self.nxtBtn.configure(activebackground="#d9d9d9")
        self.nxtBtn.configure(background="#080306")
        self.nxtBtn.configure(font=font16)
        self.nxtBtn.configure(foreground="#ffffff")
        self.nxtBtn.configure(text='''Next''')
        self.nxtBtn.configure(width=87)

        self.quitButton = Button(self.top,command=self.close)
        self.quitButton.place(relx=0.73, rely=0.8, height=36, width=87)
        self.quitButton.configure(activebackground="#d9d9d9")
        self.quitButton.configure(background="#080306")
        self.quitButton.configure(font=font16)
        self.quitButton.configure(foreground="#ffffff")
        self.quitButton.configure(text='''Quit''')

        self.menubar = Menu(self.top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        self.top.configure(menu = self.menubar)

    #this function insert quiz name ,description etc to database
    def addQues(self):
        #self.storeRoot1 = Toplevel(self.root)  # saving the root before withdrawing it this is done beecause
        # the values store in variable will be destroyed if i withdraw the root so i have to save the root before withdrawinng
         # getting the stored root
        self.top.withdraw()



        global typeofquest

        # checking which chekbox is selected and storing its state

        if self.is_checked1.get():
            typeofquest=1
        elif self.is_checked2.get():
            typeofquest=2
        elif self.is_checked3.get():
            typeofquest=3

        # in entry field values are taken in string fromat so for qid and amount of quest converitng them to integer

        self.id =self.quizID.get()
        self.Id=int(self.id)

        self.qamount=self.questAmount.get()
        self.Qamount=int(self.qamount)
        # print"inside add ques", self.count

        query="INSERT INTO question(qid,qName,qDesc,qtext,qtype) values(?,?,?,?,?) "


        parameters=self.Id,self.quizName.get(),self.quizDescription.get(),self.entry1.get(),typeofquest
        self.run_querry(query,parameters)              # passing the query and parameters to querry

        self.newWindow = Toplevel(self.top)
        self.app = self.ans(self.newWindow)
        self.top.withdraw()               #hiding the previous window

    # Add ans function , it check the question type which teacher want to add and then open corresponding window,
    # i.e if teacher want to enter MCQ it open the window to enter MCQ etc
    def ans(self, top):
        self.root = top
        '''This class configures and populates the toplevel window.
                       top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        font10 = "-family {DejaVu Sans} -size 9 -weight normal -slant " \
                 "roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 13 -weight bold -slant " \
                "roman -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 11 -weight bold -slant " \
                 "italic -underline 0 -overstrike 0"

        self.root.geometry("721x634+638+118")
        self.root.title("New Toplevel 1")
        self.root.configure(background="#006b31")


        self.is_checked1 = IntVar()
        self.is_checked2 = IntVar()
        self.is_checked3 = IntVar()
        self.is_checked4 = IntVar()
        self.is_checked5=IntVar()    # these two for true false state
        self.is_checked6 = IntVar()



            # if type of question is mcq

        if typeofquest == 1:

            self.Label1 = Label(self.root)
            self.Label1.place(relx=0.01, rely=0.13, height=28, width=236)
            self.Label1.configure(background="#006b31")
            self.Label1.configure(font=font9)
            self.Label1.configure(foreground="#ffffff")
            self.Label1.configure(text='''Enter choice (a)''')
            self.Label1.configure(width=236)

            self.Label2 = Label(self.root)
            self.Label2.place(relx=0.01, rely=0.36, height=28, width=236)
            self.Label2.configure(activebackground="#f9f9f9")
            self.Label2.configure(background="#006b31")
            self.Label2.configure(font=font9)
            self.Label2.configure(foreground="#ffffff")
            self.Label2.configure(text='''Enter choice (c)''')

            self.Label3 = Label(self.root)
            self.Label3.place(relx=0.01, rely=0.24, height=28, width=236)
            self.Label3.configure(activebackground="#f9f9f9")
            self.Label3.configure(background="#006b31")
            self.Label3.configure(font=font9)
            self.Label3.configure(foreground="#ffffff")
            self.Label3.configure(text='''Enter choice (b)''')

            self.Label4 = Label(self.root)
            self.Label4.place(relx=0.01, rely=0.49, height=28, width=236)
            self.Label4.configure(activebackground="#f9f9f9")
            self.Label4.configure(background="#006b31")
            self.Label4.configure(font=font9)
            self.Label4.configure(foreground="#ffffff")
            self.Label4.configure(text='''Enter choice (d)''')

            self.choice1 = Entry(self.root)
            self.choice1.place(relx=0.35, rely=0.13, relheight=0.05, relwidth=0.52)
            self.choice1.configure(background="white")
            # self.choice1.configure(font="TkFixedFont")
            self.choice1.configure(width=376)

            self.choice2 = Entry(self.root)
            self.choice2.place(relx=0.35, rely=0.24, relheight=0.05, relwidth=0.52)
            self.choice2.configure(background="white")
            # self.choice2.configure(font="TkFixedFont")
            self.choice2.configure(selectbackground="#c4c4c4")
            self.choice2.configure(width=376)

            self.choice3 = Entry(self.root)
            self.choice3.place(relx=0.35, rely=0.36, relheight=0.05, relwidth=0.52)
            self.choice3.configure(background="white")
            # self.choice3.configure(font="TkFixedFont")
            self.choice3.configure(selectbackground="#c4c4c4")
            self.choice3.configure(width=376)

            self.choice4 = Entry(self.root)
            self.choice4.place(relx=0.35, rely=0.47, relheight=0.05, relwidth=0.52)
            self.choice4.configure(background="white")
            self.choice4.configure(font="TkFixedFont")
            # self.choice4.configure(selectbackground="#c4c4c4")
            self.choice4.configure(width=376)

            self.Label5 = Label(self.root)
            self.Label5.place(relx=0.0, rely=0.73, height=28, width=236)
            self.Label5.configure(activebackground="#f9f9f9")
            self.Label5.configure(background="#006b31")
            self.Label5.configure(font=font9)
            self.Label5.configure(foreground="#ffffff")
            self.Label5.configure(text='''Correct Answer :''')

            ans1 = Checkbutton(self.root, text="a)", onvalue=1, offvalue=0, variable=self.is_checked1,font=("Helvetica", 14))

            ans2 = Checkbutton(self.root, text="b)", onvalue=1, offvalue=0, variable=self.is_checked2,font=("Helvetica", 14))

            ans3 = Checkbutton(self.root, text="c)", onvalue=1, offvalue=0, variable=self.is_checked3,font=("Helvetica", 14))

            ans4 = Checkbutton(self.root, text="d)", onvalue=1, offvalue=0, variable=self.is_checked4,font=("Helvetica", 14))

            ans1.place(relx=0.3, rely=0.73, relheight=0.05, relwidth=0.08)
            ans2.place(relx=0.41, rely=0.73, relheight=0.05, relwidth=0.08)
            ans3.place(relx=0.51, rely=0.73, relheight=0.05, relwidth=0.08)
            ans4.place(relx=0.61, rely=0.73, relheight=0.05, relwidth=0.08)

            # self.menubar = Menu(self.root, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
            # self.root.configure(menu=self.menubar)
        elif typeofquest == 2:
            self.root.geometry("659x369+595+158")
            self.root.title("True False")

            tLabel5 = Label(self.root)
            tLabel5.place(relx=0.02, rely=0.3, height=38, width=236)
            tLabel5.configure(activebackground="#f9f9f9")
            tLabel5.configure(background="#006b31")
            tLabel5.configure(font=font9)
            tLabel5.configure(foreground="#ffffff")
            tLabel5.configure(text='''Correct Answer :''')
            tLabel5.configure(width=236)

            tru = Checkbutton(self.root,text="True", onvalue=1, offvalue=0, variable=self.is_checked5,font=("Helvetica", 16))
            tru.place(relx=0.42, rely=0.33, relheight=0.08, relwidth=0.14)

            fals = Checkbutton(self.root,text="False", onvalue=1, offvalue=0, variable=self.is_checked6,font=("Helvetica", 16))
            fals.place(relx=0.62, rely=0.33, relheight=0.08, relwidth=0.15)

            #hkh

        else:
            self.root.geometry("659x369+595+158")
            self.root.title("Numeric")

            nLabel5 = Label(self.root)
            nLabel5.place(relx=0.02, rely=0.3, height=38, width=236)
            nLabel5.configure(activebackground="#f9f9f9")
            nLabel5.configure(background="#006b31")
            nLabel5.configure(font=font9)
            nLabel5.configure(foreground="#ffffff")
            nLabel5.configure(text='''Correct Answer :''')
            nLabel5.configure(width=236)
            self.numericAnswer = Entry(self.root, font=("Helvetica", 16))

            self.numericAnswer.place(relx=0.42, rely=0.33, relheight=0.08, relwidth=0.4)

        self.submitBtn = Button(self.root,command=self.addAnswer)
        self.submitBtn.place(relx=0.68, rely=0.87, height=46, width=107)
        self.submitBtn.configure(activebackground="#d9d9d9")
        self.submitBtn.configure(background="#040404")
        self.submitBtn.configure(cursor="fleur")
        self.submitBtn.configure(font=font11)
        self.submitBtn.configure(foreground="#ffffff")
        self.submitBtn.configure(text='''Continue''')
        self.submitBtn.configure(width=107)

        self.quitBtn = Button(self.root,command=self.close)
        self.quitBtn.place(relx=0.83, rely=0.87, height=46, width=107)
        self.quitBtn.configure(activebackground="#d9d9d9")
        self.quitBtn.configure(background="#040404")
        self.quitBtn.configure(font=font11)
        self.quitBtn.configure(foreground="#ffffff")
        self.quitBtn.configure(text='''Quit''')
        self.quitBtn.configure(width=107)

    # this function store the questions information and correct answer to database
    def addAnswer(self):
         #if quest is of type mcq
        if typeofquest==1:

            if self.is_checked1.get():
                self.answer = "a"
            if self.is_checked2.get():
                self.answer = "b"
            if self.is_checked3.get():
                self.answer = "c"
            if self.is_checked4.get():
                self.answer = "d"



            query = "INSERT INTO answer(Qid,c1,c2,c3,c4,correctAnswer,answer) values(?,?,?,?,?,?,?) "
            parameters = self.Id,self.choice1.get(), self.choice2.get(), self.choice3.get(), self.choice4.get(), self.answer,self.answer
            self.run_querry(query, parameters)

        #if quest is of type true false

        elif typeofquest==2:

            if self.is_checked5.get():
                self.answer="true"
            elif self.is_checked6.get():
                self.answer="false"


            query = "INSERT INTO answer(Qid,tfAnswer,answer,c1,c2) values(?,?,?,?,?) "
            parameters =self.Id,self.answer,self.answer,"true","false"        #have to put comma there because to create a single element tuple
            self.run_querry(query, parameters)


        #if quest is of numeric

        else:
            self.answer=self.numericAnswer.get()

            query = "INSERT INTO answer(Qid,singleAnswer,answer) values(?,?,?) "
            parameters =self.Id,self.answer,self.answer        #have to put comma there because to create a single element tuple
            self.run_querry(query, parameters)




        #is ko daikhna hai masla hai
        print "inside addAns",self.count
        self.root.withdraw()
        if self.count<self.Qamount:

            self.add()
            self.count=self.count+1

        else:
            tkMessageBox._show("Submitted","Quiz Submitted")

            self.root.destroy()

   #show Ans function shows the questions to the student so that he can attempt
    def showAns(self):
        top=Tk()
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        font10 = "-family {DejaVu Sans} -size 11 -weight bold -slant " \
                 "italic -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 13 -weight bold -slant " \
                 "roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 9 -weight normal -slant " \
                "roman -underline 0 -overstrike 0"

        top.geometry("1790x990+103+32")
        top.title("True False")
        top.configure(background="#006b31")
        top.configure(highlightcolor="black")

        with sqlite3.connect(self.dbNAme) as conn:
            cursor = conn.cursor()

        query = "Select question.qtext,answer.c1,answer.c2,answer.c3,answer.c4 ,answer.answer,question.qtype,question.qDesc,question.qName From question,answer where question.id= answer.aid"
        data = cursor.execute(query)
        conn.commit()
        self.result = data.fetchall()
        print self.result
        tkMessageBox._show(self.result[0][8],self.result[0][7]) # this message box shows the description writen by teacher about quiz and quiz title

        label = [NONE] * 100  # creating a list that can hold 100 elements
        self.entry = [NONE] * 1000
        numberforlabel = 0
        numberforentry=0
        for i in xrange(len(self.result)):
            self.counti = self.counti + 1

            for j in xrange(len(self.result[i])-4):#-1 is done because query returns the column which as correct answer so i did not show that column
                label[i] = Label(top, text=self.result[i][j], font=("Helvetica", 16), bg="#006b31", fg="white")

                numberforlabel = numberforlabel + 100
                    # label[i] = Label(top, text=self.result[i][j], font=("Helvetica", 16), bg="#006b31", fg="white")


                label[i].grid(row=i, column=j,columnspan=1,ipadx=25,ipady=20, sticky=W)
                # elif i==15
                #     label[i].pack()


                self.countj=self.countj+1
        print self.counti,self.countj

        for k in range(len(self.result)):
             numberforentry=numberforentry+80

             self.entry[k] = Entry(top, font=("Helvetica", 16))
             self.entry[k].place(x=1250, y=-55+numberforentry, relheight=0.04, relwidth=0.12)


        self.quitQuiz = Button(top,command=self.close)
        self.quitQuiz.place(relx=0.84, rely=0.9, height=46, width=107)
        self.quitQuiz.configure(activebackground="#d9d9d9")
        self.quitQuiz.configure(background="#040404")
        self.quitQuiz.configure(font=font10)
        self.quitQuiz.configure(foreground="#ffffff")
        self.quitQuiz.configure(text='''Quit''')

        self.menubar = Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.submitQuiz = Button(top,command=self.checkAnswers)
        self.submitQuiz.place(relx=0.71, rely=0.9, height=46, width=107)
        self.submitQuiz.configure(activebackground="#d9d9d9")
        self.submitQuiz.configure(background="#040404")
        self.submitQuiz.configure(font=font10)
        self.submitQuiz.configure(foreground="#ffffff")
        self.submitQuiz.configure(text='''submit''')
        top.mainloop()

    # this function checks the correct answers and show the score to the student.
    def checkAnswers(self):
        self.score = 0
        for x in range(len(self.result)):
            if (self.entry[x] == None):
                break
            else:
                pehli = self.entry[x].get()

                if self.result[x][5] == pehli:
                    self.score = self.score + 1

        strMarks="Your Score Is : "
        marks=str(self.score)
        c=strMarks+" "+marks

        tkMessageBox._show("Marks",c)
    #this function run my querry
    def run_querry(self,querry,parameters):
        with sqlite3.connect(self.dbNAme) as conn:
            cursor=conn.cursor()
            result=cursor.execute(querry,parameters)
            conn.commit()
        return result










if __name__ == '__main__':
    # vp_start_gui()
    q = question()
    q.title()



